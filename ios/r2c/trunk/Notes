halsey: ok, the get_questions stuff should be working properly with the ordering etc. now.
as I mentioned, the ordering value is now a double, not an integer, but I don't think you need to worry about that since the questions will be returned to you in the correct order within the JSON.

---
9:56
Joe Zobkiw
so
?
10:01
Halsey Burgund
ok, so Mike and I decided that it makes the most sense for the server to handle both the genderid/ageid combo as well as demographicid depending on which method the client uses to make selections.  in other words, if the client gui uses man, woman, boy, girl selections, then the client can send demographicids to the server, but if for a different project, we want, for example, more granularity with age ranges, the client can ask the user to select ageids and genderids in a decoupled way and thus send the ageids and genderids separately.
just trying to make your life easier...
of course, the server does not yet handle this, but Mike should be able to make the changes relatively soon.
10:02
Joe Zobkiw
ok - so i will send demographicid as i do now but just change the , separated to tab separated?
10:03
Halsey Burgund
correct.  that said, I'm not sure if you'll get an error with this before Mike makes the server changes.
10:03
Joe Zobkiw
right
and regarding the log_event monstrosity? 
10:06
Halsey Burgund
yeah, so Mike's idea with the 'message' parameter was to use it for any message the client might want to send to the server along with a log_event message.  primarily, he was thinking that this would be used for sending client errors which could help debugging.
10:07
Joe Zobkiw
ok
10:07
Halsey Burgund
so for the upload_stop event type, if no message is sent, the assumption is that the upload worked fine, but if an error is returned, that could be sent as the message, indicating that the upload failed and giving some detail as to what the problem was.
I assume there is some sort of error handling/reporting that you already do for the upload, yes?
10:09
Joe Zobkiw
yes, i would have to look at the specifics but i handle a failure…and allow a try again i think...
so are you saying this is going to different now:
#define kEVENT_STOP_UPLOAD_SUCCESS    8 -> log_event (eventtypeid=14, message=Y)
#define kEVENT_STOP_UPLOAD_FAIL        9 -> log_event (eventtypeid=14, message=N)
so we won't send Y or N?
how does what you just said effect these two messages is a better way to ask my question
10:12
Halsey Burgund
correct; no more Y or N.  Instead of Y, you send nothing, instead of N, you send "ERROR: something went wrong with the upload on line 28…" or some such message.  Mike and I both agreed with you that it seemed a bit convoluted with Y/N, so we tried to come up with a solution that more consistently handled the original intent of the message parameter.
we can use this same approach for other errors as well if it makes sense.
what do you think?
10:14
Joe Zobkiw
so will the log_event eventtypeid still be chanegd to 14 or will it revert back to two separate messages 8 and 9?
10:22
Halsey Burgund
it should stay at 14 since the same eventtypeid will handle both the successes (no message) and the failures (with an error message)
10:23
and please begin the error with "ERROR: " as that will be a convenient way for us to parse the data later in case we end up using the message field for things other than errors…
10:36
Joe Zobkiw
k...
phone…be bak...
10:37
Halsey Burgund
np...
11:17
Joe Zobkiw
ok - if you could let me know when mike gets his stuff done that would be good
----



Here's a first pass at this stuff.  I will not pretend it is totally organized, but it should contain a bunch of useful info!

Here are the parameters currently being sent by the submitEvent function along with what they need to change to for the new protocol:

- operationid -> will change to 'operation' and will be a string of the operation name instead of an integer (ie. operation=request_stream)
- udid -> NO CHANGE
- sessionid -> NO CHANGE (that said, sessionid is now generated by the server and returned by the request_stream operation, so it will not exist until that operation has run)
- clienttime -> NO CHANGE
- locationServicesEnabled -> no longer using, I don't think
- latitude -> NO CHANGE
- longitude -> NO CHANGE
- course -> NO CHANGE
- haccuracy -> NO CHANGE
- speed -> NO CHANGE
- stream_url -> no longer used as the sessionid is server-generated and therefore guaranteed to be unique
- genderage -> we need to discuss this as it is a bit complicated
- questionid -> similar discussion needed

ageid/genderid/questionid lists are sent in the POST/GET as tab separated lists
for example: http://scapesaudio.dyndns.org:8080/roundware/roundware.py?operation=modify_stream&genderid=1&categoryid=7&clienttime=1288377963416&ageid=9%0910%0911&config=scapes&subcategoryid=8&sessionid=109&questionid=19%0920%0916%0917%0921%0923
that should work fine, using the %09 as the tab character in the string...

Additional parameters are:
- categoryid (constant: 8 for Scapes and 7 for OV)
- subcategoryid (constant: 9 for Scapes and 8 for OV)

And as always, include:
- config (scapes or oceanvoices)


Here are the mappings between the current operations/events and the new operation names:

#define kEVENT_UPLOAD			0 -> upload_and_process_file
#define kEVENT_GPS_FIX			1 -> move_listener
#define	kEVENT_GPS_IDLE			2 -> heartbeat
#define kEVENT_START_STREAM		3 -> log_event (eventtypeid=3)
#define kEVENT_STOP_STREAM		4 -> log_event (eventtypeid=4)
#define kEVENT_START_RECORD		5 -> log_event (eventtypeid=5)
#define kEVENT_STOP_RECORD		6 -> log_event (eventtypeid=6)
#define kEVENT_START_UPLOAD		7 -> log_event (eventtypeid=7)
#define kEVENT_STOP_UPLOAD_SUCCESS	8 -> log_event (eventtypeid=14, message=Y)
#define kEVENT_STOP_UPLOAD_FAIL		9 -> log_event (eventtypeid=14, message=N)
#define kEVENT_START_SESSION		10 -> request_stream
#define kEVENT_STOP_SESSION		11 -> log_event (eventtypeid=11)
#define kEVENT_MODIFY_STREAM		12 -> modify_stream	 

File upload stuff uses a different function and url currently; here are the parameters:

- file -> NO CHANGE; still binary of audio file itself
- operationid -> will change to operation=upload_and_process_file
- udid -> NO CHANGE
- sessionid -> NO CHANGE
- clienttime -> NO CHANGE
- latitude -> NO CHANGE
- longitude -> NO CHANGE
- course -> NO CHANGE
- haccuracy -> NO CHANGE
- speed -> NO CHANGE
- demographicid -> we need to discuss this as it is a bit complicated
- questionid -> similar discussion needed
- usertypeid -> NO CHANGE, but only needed in OV, not Scapes

Other issues we need to discuss are the fact that everything is returned from the server in JSON at this point.  Also, there is a get_questions operation which replaces the urls you used to go to to get the listen and speak questions.  That's going to require a bit of a rewrite, unfortunately, because we hacked it together before.

The protocol doc should have all the other specifics you need, I think.

---

get_questions

if you post this url: http://scapesaudio.dyndns.org:8080/roundware/roundware.py?config=scapes&operation=get_questions&categoryid=8&subcategoryid=9

you get the JSON response:
[ { "categoryid": 8, "id": 32, "listenyn": "Y", "ordering": 15, "speakyn": "Y", "subcategoryid": 9, "text": "Look straight up and describe what you see." }, { "categoryid": 8, "id": 33, "listenyn": "Y", "ordering": 20, "speakyn": "Y", "subcategoryid": 9, "text": "Tell us about someone you wish was here with you right now. Talk to her/him." }, { "categoryid": 8, "id": 23, "listenyn": "Y", "ordering": 0, "speakyn": "Y", "subcategoryid": 9, "text": "Scapes is an excuse to talk to yourself about anything at all. Go for it." }, { "categoryid": 8, "id": 24, "listenyn": "Y", "ordering": 5, "speakyn": "Y", "subcategoryid": 9, "text": "Ask a question of those who come after you." }, { "categoryid": 8, "id": 29, "listenyn": "Y", "ordering": 10, "speakyn": "Y", "subcategoryid": 9, "text": "Tell a story inspired by something you see or feel here." } ]

This is a straight dump from the database, so it does not handle the randomized ordering that is currently implemented.  If you have any good ideas for keeping questionid=23 as the first and then the others randomizing their order per session, that would be great, but this is not a big deal right now since this code will not be used live in Scapes anyway.  I'm sure I'll want to figure out a way to randomize eventually, but it may just be a server-side thing.

---

constants.h url info

// URLs
#define kListenQuestionsURL		NO LONGER USED - operation=get_questions instead
#define kSpeakQuestionsURL		NO LONGER USED - operation=get_questions instead
#define kUploadURL			NO LONGER USED - operation=upload_and_process_file instead
#define kEventURL			@"http://scapesaudio.dyndns.org:8080/roundware/roundware.py" // 8080 for test server
#define kAudioFormatURL			@"http://scapesaudio.dyndns.org/scapes/audio_format.php"  // moved to primary Scapes server to avoid DH
#define kMaxRecordingTimeSecondsURL	@"http://scapesaudio.dyndns.org/scapes/maxRecordingTimeSeconds.php"  // moved to primary Scapes server to avoid DH

Now that I think about it, I'm not really sure that you'll be able to transition partially to the new protocol since everything is going through the same kEventURL now.  Clearly we can test certain things before other things, though.  I would think the best approach would basically to be to update the things in the order that they happen when the app is opened.  So getting request_stream and get_questions going first and then go to move_listener and modify_stream followed by upload_and_process_file and finally log_event as that won't mess anything else up when not working.  I will test whatever you need whenever, so keep me posted and send questions when they come up.

I've attached the most recent code as well...might not have all the above urls right now, but everything else should be exactly what is in V1.2 on the app store.
